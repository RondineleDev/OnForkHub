name: Enhanced PR Telegram Notification

on:
  fork:
  pull_request:
    types: [opened, closed, edited, reopened]
  issues:
    types: [opened, closed, reopened, edited]
  issue_comment:
    types: [created, edited, deleted]
  push:
    branches:
      - main
      - dev
      - 'release/**'
      - 'feature/**'
      - 'hotfix/**'
      - 'bugfix/**'
  watch:
    types: [started]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Get current UTC time
        id: current-time
        run: echo "::set-output name=time::$(date -u '+%d/%m/%Y %H:%M:%S UTC')"

      - name: Send Telegram Notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            🔔 *GitHub Notification*
            *Repository:* [${{ github.repository }}](${{ github.event.repository.html_url }})
            ${{ (github.event_name == 'fork') && '
            🔱 *New Fork Created*
            ├ Repository: ' || '' }}${{ (github.event_name == 'fork') && github.repository || '' }}
            ${{ (github.event_name == 'fork') && '├ Forked by: ' || '' }}${{ (github.event_name == 'fork') && github.actor || '' }}
            ${{ (github.event_name == 'fork') && '└ Fork URL: ' || '' }}${{ (github.event_name == 'fork') && github.event.forkee.html_url || '' }}

            ${{ github.event_name == 'pull_request' && format('🔄 *Pull Request #{0}*
            ├ Branch Source: `{1}`
            ├ Branch Target: `{2}`
            ├ Title: {3}
            ├ Author: [{4}](https://github.com/{4})
            ├ Status: {5}
            └ URL: [View PR]({6})',
              github.event.pull_request.number,
              github.event.pull_request.head.ref,
              github.event.pull_request.base.ref,
              github.event.pull_request.title,
              github.event.pull_request.user.login,
              github.event.action,
              github.event.pull_request.html_url
            ) || '' }}

            ${{ github.event_name == 'push' && format('📝 *Push*
            ├ Branch: `{0}`
            ├ Author: [{1}](https://github.com/{1})
            ├ Commits: {2}
            ├ Message: {3}
            └ URL: [View Changes]({4})',
              github.ref_name,
              github.event.pusher.name,
              github.event.commits.length,
              github.event.head_commit.message,
              format('{0}/commit/{1}', github.event.repository.html_url, github.event.after)
            ) || '' }}

            ${{ github.event_name == 'issues' && format('📝 *Issue #{0}*
            ├ Title: {1}
            ├ Status: {2}
            ├ Author: [{3}](https://github.com/{3})
            └ URL: [View Issue]({4})',
              github.event.issue.number,
              github.event.issue.title,
              github.event.action,
              github.event.issue.user.login,
              github.event.issue.html_url
            ) || '' }}

            ${{ github.event_name == 'issue_comment' && format('💭 *Comment on {0} #{1}*
            ├ Author: [{2}](https://github.com/{2})
            ├ Content: {3}
            └ URL: [View Comment]({4})',
              contains(github.event.issue.html_url, '/pull/') && 'PR' || 'Issue',
              github.event.issue.number,
              github.event.comment.user.login,
              github.event.comment.body,
              github.event.comment.html_url
            ) || '' }}

            ${{ github.event_name == 'watch' && format('⭐ *Repository Starred*
            └ By: [{0}]({1})',
              github.event.sender.login,
              github.event.sender.html_url
            ) || '' }}

            ⏰ ${{ steps.current-time.outputs.time }}</antArtifact>

name: PR Telegram Notification

on:
  pull_request:
    types: [opened, closed, edited, ready_for_review, review_requested, reopened]
  pull_request_review:
    types: [submitted, edited, dismissed]
  pull_request_review_comment:
    types: [created, edited, deleted]
  issues:
    types: [opened, closed, reopened, edited]
  issue_comment:
    types: [created, edited, deleted]
  fork:
  push:
    branches:
      - main
      - dev
      - 'release/**'
      - 'feature/**'
      - 'hotfix/**'
      - 'bugfix/**'
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Send Telegram Notification
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          disable_web_page_preview: true
          message: |
            🔔 *GitHub Notification*
            
            *Repository:* [${{ github.repository }}](https://github.com/${{ github.repository }})
            *Branch:* `${{ github.ref_name }}`
            
            ${{ github.event_name == 'pull_request' && format('🔄 *Pull Request #{0}*
            └ *Title:* {1}
            └ *Status:* {2}
            └ *Author:* [{3}]({4})
            └ *Base Branch:* `{5}`
            └ [View PR]({6})', 
            github.event.pull_request.number,
            github.event.pull_request.title,
            github.event.action,
            github.event.pull_request.user.login,
            github.event.pull_request.user.html_url,
            github.event.pull_request.base.ref,
            github.event.pull_request.html_url) || '' }}
            
            ${{ github.event_name == 'push' && format('📦 *New Push*
            └ *Branch:* `{0}`
            └ *Author:* [{1}](https://github.com/{1})
            └ *Commits:* {2}
            └ [View Changes]({3}/commit/{4})

            *Latest Commit Details:*
            ```
            {5}
            ```', 
            github.ref_name,
            github.event.pusher.name,
            github.event.commits.length,
            github.event.repository.html_url,
            github.event.after,
            github.event.head_commit.message) || '' }}
            
            ${{ github.event_name == 'fork' && format('🔱 *Repository Forked*
            └ *By:* [{0}]({1})
            └ *Fork Name:* {2}
            └ [View Fork]({3})', 
            github.event.forkee.owner.login,
            github.event.forkee.owner.html_url,
            github.event.forkee.full_name,
            github.event.forkee.html_url) || '' }}
            
            ${{ github.event_name == 'issues' && format('📌 *Issue #{0}*
            └ *Title:* {1}
            └ *Status:* {2}
            └ *Author:* [{3}]({4})
            └ [View Issue]({5})', 
            github.event.issue.number,
            github.event.issue.title,
            github.event.action,
            github.event.issue.user.login,
            github.event.issue.user.html_url,
            github.event.issue.html_url) || '' }}
            
            ⏰ _${{ github.event.repository.updated_at }}_

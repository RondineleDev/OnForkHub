import y from "webtorrent";
const s = {};
async function h(n, r, w) {
  try {
    s[n] = new y();
    const t = s[n], d = document.getElementById(n);
    if (!d)
      throw new Error(`Container #${n} not found`);
    const o = d.querySelector("video"), c = d.querySelector(".torrent-progress");
    if (!o || !c)
      throw new Error("Required elements not found");
    o.addEventListener("play", () => {
      r.invokeMethodAsync("OnPlay");
    }), o.addEventListener("ended", () => {
      r.invokeMethodAsync("OnEnded");
    }), o.addEventListener("timeupdate", () => {
      r.invokeMethodAsync(
        "OnTimeUpdate",
        o.currentTime,
        o.duration
      );
    }), t.add(w, {
      announce: [
        "wss://tracker.openwebtorrent.com",
        "wss://tracker.btorrent.xyz",
        "wss://tracker.fastcast.nz"
      ]
    }, (i) => {
      const a = i.files.find(
        (e) => e.name.endsWith(".mp4") || e.name.endsWith(".webm") || e.name.endsWith(".mkv")
      );
      if (!a)
        throw new Error("No video file found in torrent");
      a.getBlobURL((e, l) => {
        if (e) throw e;
        if (!l) throw new Error("Failed to get video URL");
        o.src = l;
      }), i.on("download", () => {
        const e = (i.progress * 100).toFixed(1);
        c.textContent = `Downloading: ${e}%`, c.style.display = i.progress === 1 ? "none" : "block";
      });
    });
  } catch (t) {
    throw console.error("Error initializing torrent player:", t), t;
  }
}
function p(n) {
  const r = s[n];
  r && (r.destroy(), delete s[n]);
}
export {
  p as disposeTorrentPlayer,
  h as initTorrentPlayer
};

var H = Object.defineProperty;
var M = (e, n, t) => n in e ? H(e, n, { enumerable: !0, configurable: !0, writable: !0, value: t }) : e[n] = t;
var h = (e, n, t) => M(e, typeof n != "symbol" ? n + "" : n, t);
function $(e) {
  console.log("setupCounter - Iniciando com elemento:", e);
  let n = 0;
  const t = (d) => {
    n = d, e.innerHTML = `count is ${n}`, console.log("Counter atualizado para:", n);
  };
  e.addEventListener("click", () => {
    console.log("Clique detectado - valor atual:", n), t(n + 1);
  }), t(0);
}
function q(e) {
  const n = parseInt(e.innerHTML.replace("count is ", ""), 10) || 0;
  e.innerHTML = `count is ${n + 1}`, console.log("Counter incrementado para:", n + 1);
}
function I() {
  console.log("Hello, World - from JS");
}
const b = /* @__PURE__ */ new WeakMap();
class E {
  constructor(n) {
    h(this, "element");
    h(this, "count");
    this.element = n, this.count = 0, this.init();
  }
  init() {
    this.updateDisplay(), this.element.addEventListener("click", () => this.increment());
  }
  increment() {
    this.count++, this.updateDisplay(), console.log("Exemplo incrementado para:", this.count);
  }
  updateDisplay() {
    this.element.innerHTML = `Exemplo count: ${this.count}`;
  }
}
function U(e) {
  const n = new E(e);
  return b.set(e, n), n;
}
function z(e) {
  let n = b.get(e);
  n || (n = new E(e), b.set(e, n)), n.increment();
}
let y = null, l = null, T = !1, s = null;
function v(e) {
  if (!e || !(e instanceof HTMLElement))
    throw new Error("Element is not an HTMLElement");
}
function L() {
  if (s) {
    try {
      const e = s.src;
      s.pause(), s.src = "", s.load(), e.startsWith("blob:") && URL.revokeObjectURL(e);
    } catch (e) {
      console.warn("Error cleaning up video element:", e);
    }
    s = null;
  }
}
function x() {
  return `
        <div class="w-100 h-100 d-flex flex-column align-items-center justify-content-center">
            <div class="loading-status text-white mb-3">Initializing...</div>
            <div class="progress w-75">
                <div class="progress-bar" role="progressbar" style="width: 0%"></div>
            </div>
        </div>
    `;
}
function S() {
  const e = document.createElement("video");
  return e.style.display = "none", e.className = "w-100 h-100", e.style.objectFit = "contain", e.playsInline = !0, e.controls = !0, e.preload = "auto", e;
}
async function k() {
  if (!document.querySelector('script[src*="webtorrent"]'))
    return new Promise((e, n) => {
      const t = document.createElement("script");
      t.src = "https://cdn.jsdelivr.net/npm/webtorrent@latest/webtorrent.min.js", t.async = !0, t.onload = () => {
        console.log("WebTorrent script loaded"), e();
      }, t.onerror = (d) => {
        console.error("Failed to load WebTorrent script:", d), n(new Error("Failed to load WebTorrent script"));
      }, document.head.appendChild(t);
    });
}
async function C() {
  if (!T)
    if (await k(), window.WebTorrent)
      console.log("Creating WebTorrent client..."), y = new window.WebTorrent(), T = !0, console.log("WebTorrent client created");
    else
      throw new Error("WebTorrent not loaded");
}
async function F(e) {
  try {
    e.innerHTML = "Initializing WebTorrent...", await C(), e.innerHTML = "WebTorrent initialized";
  } catch (n) {
    const t = n instanceof Error ? n.message : "Unknown error";
    throw e.innerHTML = `Error: ${t}`, n;
  }
}
async function V(e, n, t) {
  return console.log("Starting download..."), L(), y || (console.log("Client not initialized, setting up..."), await C()), l && (console.log("Destroying existing torrent..."), l.destroy(), l = null), new Promise((d, w) => {
    try {
      const r = document.querySelector(n);
      if (!r)
        throw new Error(`Container element not found: ${n}`);
      r.innerHTML = x();
      const u = r.querySelector(".loading-status"), p = r.querySelector(".progress-bar");
      u && v(u), p && v(p);
      const W = {
        announce: [
          "wss://tracker.openwebtorrent.com",
          "wss://tracker.webtorrent.dev"
        ],
        maxWebConns: 4,
        strategy: "sequential"
      };
      y.add(t, W, (i) => {
        console.log("Torrent added, searching for video file..."), l = i;
        const m = i.files.find((o) => {
          const a = o.name.endsWith(".mp4") || o.name.endsWith(".webm") || o.name.endsWith(".mkv");
          return console.log("Checking file:", o.name, "isVideo:", a), a;
        });
        if (!m)
          throw new Error("No video file found in torrent");
        console.log("Video file found:", m.name);
        const c = S();
        s = c, r.appendChild(c), m.getBlobURL((o, a) => {
          if (o) {
            console.error("Error getting blob URL:", o), w(o);
            return;
          }
          console.log("Got blob URL, setting up video..."), c.src = a, c.style.display = "block";
          const g = r.querySelector(".d-flex");
          g && r.removeChild(g), c.addEventListener("loadedmetadata", () => {
            console.log("Video metadata loaded"), i.progress > 0.1 && c.play().catch((f) => {
              console.warn("Could not auto-start video:", f);
            });
          });
        }), i.on("download", () => {
          const o = (i.progress * 100).toFixed(1), a = (i.downloadSpeed / (1024 * 1024)).toFixed(2), g = `Progress: ${o}% (${a} MB/s)`;
          u && (u.textContent = `Loading: ${o}%`), p && (p.style.width = `${o}%`), e.innerHTML = g, i.progress > 0.1 && s && s.paused && s.play().catch((f) => {
            console.warn("Could not start video:", f);
          });
        }), i.on("done", () => {
          console.log("Download complete"), e.innerHTML = "Download complete", d();
        }), i.on("error", (o) => {
          console.error("Torrent error:", o), w(o);
        }), i.on("warning", (o) => {
          o.message.includes("tracker") || console.warn("Torrent warning:", o);
        });
      });
    } catch (r) {
      console.error("Error in startDownload:", r), w(r);
    }
  });
}
function R() {
  console.log("Stopping download..."), L(), l && (l.destroy(), l = null);
  const e = document.querySelector("#videoContainer");
  e && (e.innerHTML = ""), console.log("Download stopped, resources cleaned up");
}
export {
  $ as Counter,
  U as Exemplo,
  I as HelloWorld,
  q as incrementCounter,
  z as incrementExemplo,
  F as initTorrentPlayer,
  V as startDownload,
  R as stopDownload
};

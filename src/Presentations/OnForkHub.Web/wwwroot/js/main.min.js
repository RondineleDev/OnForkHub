var p = Object.defineProperty;
var m = (n, e, t) => e in n ? p(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;
var s = (n, e, t) => m(n, typeof e != "symbol" ? e + "" : e, t);
import * as h from "webtorrent";
function g(n) {
  console.log("setupCounter - Iniciando com elemento:", n);
  let e = 0;
  const t = (o) => {
    e = o, n.innerHTML = `count is ${e}`, console.log("Counter atualizado para:", e);
  };
  n.addEventListener("click", () => {
    console.log("Clique detectado - valor atual:", e), t(e + 1);
  }), t(0);
}
function w(n) {
  const e = parseInt(n.innerHTML.replace("count is ", ""), 10) || 0;
  n.innerHTML = `count is ${e + 1}`, console.log("Counter incrementado para:", e + 1);
}
function v() {
  console.log("Hello, World - from JS");
}
const l = /* @__PURE__ */ new WeakMap();
class u {
  constructor(e) {
    s(this, "element");
    s(this, "count");
    this.element = e, this.count = 0, this.init();
  }
  init() {
    this.updateDisplay(), this.element.addEventListener("click", () => this.increment());
  }
  increment() {
    this.count++, this.updateDisplay(), console.log("Exemplo incrementado para:", this.count);
  }
  updateDisplay() {
    this.element.innerHTML = `Exemplo count: ${this.count}`;
  }
}
function H(n) {
  const e = new u(n);
  return l.set(n, e), e;
}
function T(n) {
  let e = l.get(n);
  e || (e = new u(n), l.set(n, e)), e.increment();
}
const c = new h();
class E {
  constructor(e, t, o) {
    this.progressElement = e, this.videoElement = t, this.magnetUri = o;
  }
  async startDownload() {
    return new Promise((e, t) => {
      c.add(this.magnetUri, (o) => {
        const a = o.files.find(
          (r) => r.name.endsWith(".mp4") || r.name.endsWith(".webm") || r.name.endsWith(".mkv")
        );
        if (!a) {
          t(new Error("No video file found"));
          return;
        }
        a.renderTo(this.videoElement), o.on("done", () => {
          this.progressElement.innerHTML = "Download complete", e();
        });
        const d = setInterval(() => {
          const r = (o.progress * 100).toFixed(1);
          this.progressElement.innerHTML = `Progress: ${r}%`, o.progress === 1 && clearInterval(d);
        }, 1e3);
      });
    });
  }
  stop() {
    this.videoElement.pause(), this.videoElement.src = "", this.progressElement.innerHTML = "Stopped", c.destroy();
  }
}
let i = null;
function C(n, e, t) {
  i = new E(n, e, t);
}
function L() {
  if (!i) throw new Error("Player not initialized");
  return i.startDownload();
}
function x() {
  i && i.stop();
}
export {
  g as Counter,
  H as Exemplo,
  v as HelloWorld,
  w as incrementCounter,
  T as incrementExemplo,
  C as initTorrentPlayer,
  L as startDownload,
  x as stopDownload
};
